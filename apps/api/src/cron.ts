import { GoogleSpreadsheet } from 'google-spreadsheet';
import { JWT } from 'google-auth-library';
import { env } from 'cloudflare:workers';
import { createDatabaseConnection } from '@freshmen68/db';
import { students, teams } from '@freshmen68/db/schemas';


export async function exportDataToGoogleSheetScheduled() {
	const db = createDatabaseConnection(env.DATABASE_URL)
	if (!env.GOOGLE_SERVICE_ACCOUNT_EMAIL || !env.GOOGLE_PRIVATE_KEY) {
		throw new Error('Google service account credentials are not set in environment variables');
	}

	const studentsData = await db.select().from(students)
	const teamsData = await db.select().from(teams)

	const serviceAccountAuth = new JWT({
		// env var values here are copied from service account credentials generated by google
		// see "Authentication" section in docs for more info
		email: env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
		key: env.GOOGLE_PRIVATE_KEY,
		scopes: ['https://www.googleapis.com/auth/spreadsheets'],
	});

	const doc = new GoogleSpreadsheet('14jjSCFxrBM5_dWjl9smV2nviN2WSONlf4oFI-Jj2LVM', serviceAccountAuth)

	// update the document data
	await doc.loadInfo(); // loads document properties and worksheets
	const studentDataSheet = doc.sheetsByTitle['[1.1]'] // get the first sheet
	if (!studentDataSheet) {
		throw new Error('Student data sheet not found');
	}
	await studentDataSheet.clearRows({
		start: 1, // clear all rows except the header
		end: studentDataSheet.rowCount,
	})
	await studentDataSheet.setHeaderRow([
		'id', 'title', 'first_name', 'last_name', 'nickname', 'student_id', 'department',
		'email', 'phone', 'emergency_contact_name', 'emergency_contact_phone',
		'emergency_contact_relationship', 'medical_conditions', 'allergies',
		'food_allergies', 'food_limitations', 'team_owned_id', 'team_id',
		'created_at', 'updated_at'
	]); // set header row

	await studentDataSheet.addRows(studentsData.map(student => ({
		id: student.id,
		title: student.title,
		first_name: student.firstName,
		last_name: student.lastName,
		nickname: student.nickname ?? "",
		student_id: student.studentId,
		department: student.department,
		email: student.email,
		phone: student.phone,
		emergency_contact_name: student.emergencyContactName,
		emergency_contact_phone: student.emergencyContactPhone,
		emergency_contact_relationship: student.emergencyContactRelationship,
		medical_conditions: student.medicalConditions ?? "",
		allergies: student.dragAllergies ?? "",
		food_allergies: student.foodAllergies ?? "",
		food_limitations: student.foodLimitations ?? "",
		team_owned_id: student.teamOwnedId ?? "",
		team_id: student.teamId ?? "",
		created_at: student.createdAt.toISOString(),
		updated_at: student.updatedAt.toISOString(),
	})));

	const teamDataSheet = doc.sheetsByTitle['[1.2]']
	if (!teamDataSheet) {
		throw new Error('Team data sheet not found');
	}
	await teamDataSheet.clearRows({
		start: 1, // clear all rows except the header
		end: teamDataSheet.rowCount,
	})
	await teamDataSheet.setHeaderRow([
		'id', 'creator_id', 'group_number_preference_order', 'is_submitted',
		'result_group_number', 'team_codes', 'created_at', 'updated_at'
	]); // set header row

	await teamDataSheet.addRows(teamsData.map(team => ({
		id: team.id,
		creator_id: team.creatorId,
		group_number_preference_order: team.groupNumberPreferenceOrder ?? "",
		is_submitted: team.isSubmitted,
		result_group_number: team.resultGroupNumber ?? "",
		team_codes: team.teamCodes,
		created_at: team.createdAt.toISOString(),
		updated_at: team.updatedAt.toISOString(),
	})));

	await studentDataSheet.saveUpdatedCells();
	await teamDataSheet.saveUpdatedCells();
}
